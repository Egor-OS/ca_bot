import os
from datetime import datetime
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from .. import cert_helper as crt_h

class TeacherPanel():
    cert_helper = crt_h.Cert_Helper()
    
    def __init__(self, db, bot, cloud_mail, AdmS, conf):
        self.AdminStates = AdmS
        self.db_prov = db
        self.bot = bot
        self.cloud_mail = cloud_mail
        self.config = conf
    
    class TeachStates(StatesGroup):
        teach_menu = State()
        teach_choice_coll = State()
        teach_choice_group = State()
        teach_choice_stud = State()
        teach_choice_type_f = State()
        teach_choice_file = State()
        teach_uncheck_choice_coll = State()
        teach_uncheck_choice_group = State()
        teach_uncheck_choice_stud = State()
        teach_uncheck_choice_type_f = State()
        teach_uncheck_choice_file = State()
        teach_file_act = State()
        teach_file_comp = State()
        teach_send_f_back = State()
        teach_pers_data = State()
        teach_pers_data_ch_srt = State()
    
    async def teach_menu(self,message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == 'üìù –î–æ–∫—É–º–µ–Ω—Ç—ã':
            list_coll = self.db_prov.get_coll_teach(data['obj_id'])
            await state.update_data(fl=1)
            await state.update_data(list_coll=list_coll)
            for name in sorted(list_coll.keys(), reverse=True):
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥', 'üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç')
            await message.answer('–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_coll.set()
        elif message.text == "‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã":
            file_list = self.db_prov.get_uncheck_files_teach(data['obj_id'])
            if file_list:
                await state.update_data(fl=2)
                await state.update_data(file_list=file_list)
                for name in sorted(file_list.keys(), reverse=True):
                    keyboard.add(name)
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
                await message.answer('–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=keyboard)
                await self.TeachStates.teach_uncheck_choice_coll.set()
            else:
                for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', '‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                    keyboard.add(name)
                await message.answer('‚úÖ –ù–µ–ø—Ä–æ–≤–µ—Ä–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!', reply_markup=keyboard)
        elif message.text == 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ':
            teach_info = self.db_prov.get_teach_info(data['obj_id'])
            await state.update_data(teach_info=teach_info)
            for name in ['‚ôª –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å','‚¨Ö –ù–∞–∑–∞–¥']:
                keyboard.add(name)
            key = self.db_prov.get_key(data['obj_id'])
            if not key:
                key = 'ü§∑‚Äç‚ôÇ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: {teach_info["l_name"]} \n–ò–º—è: {teach_info["f_name"]} \n–û—Ç—á–µ—Å—Ç–≤–æ: {teach_info["m_name"]} \nTelegram-id: {teach_info["tg_id"]} \n–ö–ª—é—á –ø–æ–¥–ø–∏—Å–∏: \n\n{key} ',
                reply_markup=keyboard)
            await self.TeachStates.teach_pers_data.set()
        elif message.text == 'admin':
            teach_info = self.db_prov.get_teach_info(data['obj_id'])
            await state.update_data(teach_info=teach_info)
            if teach_info['tg_id'] in self.config.ADMINS:
                for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                    keyboard.add(name)
                await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
                await self.AdminStates.admin_menu.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã
    async def teach_choice_coll(self, message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text == 'üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç':
            a = await message.answer('–û—Ç—á–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...')
            file_name = self.db_prov.get_report(data['obj_id'])
            if file_name:
                await message.answer_document(open(file_name, 'rb'))
                os.remove(file_name)
            else:
                await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞!')
            await self.bot.delete_message(a.chat.id, a.message_id)
        elif message.text in data['list_coll'].keys():
            choice_coll = message.text
            await state.update_data(choice_coll=choice_coll)
            group_list = self.db_prov.get_group_list(data['list_coll'][choice_coll]['_id'])
            await state.update_data(group_list=group_list)
            for name in group_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/{message.text}:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_group.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]
    async def teach_choice_group(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            list_coll = self.db_prov.get_coll_teach(data['obj_id'])
            await state.update_data(list_coll=list_coll)
            for name in sorted(list_coll.keys(), reverse=True):
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_coll.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in data['group_list'].keys():
            choice_group = message.text
            await state.update_data(choice_group=choice_group)
            stud_list = self.db_prov.get_stud_list(data["group_list"][choice_group]['_id'])
            await state.update_data(stud_list=stud_list)
            for name in stud_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/–î–æ–∫—É–º–µ–Ω—Ç—ã/{data["choice_coll"]}/{choice_group}:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_stud.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]
    async def teach_choice_stud(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_coll = data['choice_coll']
            group_list = self.db_prov.get_group_list(data['list_coll'][choice_coll]['_id'])
            await state.update_data(group_list=group_list)
            for name in group_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/{choice_coll}:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_group.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in data['stud_list'].keys():
            choice_stud = message.text
            await state.update_data(choice_stud=choice_stud)
            file_list = self.db_prov.get_files_teach(data['stud_list'][choice_stud]['_id'], data['list_coll'][data['choice_coll']]['_id'])
            await state.update_data(file_list=file_list)
            for name in file_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_group"]}/{choice_stud}:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_type_f.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]/(–≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞)
    async def teach_choice_type_f(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_group = data['choice_group']
            await state.update_data(choice_group=choice_group)
            stud_list = self.db_prov.get_stud_list(data["group_list"][choice_group]['_id'])
            await state.update_data(stud_list=stud_list)
            for name in stud_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/–î–æ–∫—É–º–µ–Ω—Ç—ã/{data["choice_coll"]}/{choice_group}:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_stud.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in data['file_list'].keys():
            choice_type = message.text
            await state.update_data(choice_type=choice_type)
            for name in data['file_list'][choice_type]:
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_stud"]}/{choice_type}:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_file.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]/[—Ç–∏–ø] (–≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞)
    async def teach_choice_file(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_stud = data["choice_stud"]
            file_list = self.db_prov.get_files_teach(data['stud_list'][choice_stud]['_id'], data['list_coll'][data['choice_coll']]['_id'])
            await state.update_data(file_list=file_list)
            for name in file_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_group"]}/{choice_stud}:', reply_markup=keyboard)
            await self.TeachStates.teach_choice_type_f.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in data['file_list'][data['choice_type']].keys():
            choice_file = message.text
            if data['file_list'][data['choice_type']][choice_file]['status'] != 'accepted':
                await state.update_data(choice_file=choice_file)
                for name in ['üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É', 'üìù –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É', 'üõ† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É']:
                    keyboard.add(name)
                keyboard.add("‚¨Ö –ù–∞–∑–∞–¥",'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                txt = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ:\n\nüßë‚Äçüíª –í–ª–∞–¥–µ–ª–µ—Ü: <b><i>{data["choice_stud"]}</i></b>\nüì• –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: <b><i>{data["file_list"][data["choice_type"]][choice_file]["date_upload"]}</i></b>\nüìö –í–∏–¥ —Ä–∞–±–æ—Ç—ã: <b><i>{data["choice_type"]}</i></b>\nüìÅ –§–∞–π–ª: <b><i>{choice_file}</i></b>'
                if data["file_list"][data["choice_type"]][choice_file]["comment"]!="":
                    txt += f'\n\nüìå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:\n<b><i>{data["file_list"][data["choice_type"]][choice_file]["comment"]}</i></b>'
                await message.answer(txt,reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                await self.TeachStates.teach_file_act.set()
            else:
                await message.answer('‚ùé –§–∞–π–ª —É–∂–µ –ø—Ä–∏–Ω—è—Ç, –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –Ω–∏–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã!')
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]/[—Ç–∏–ø]/[—Ñ–∞–π–ª] (–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —Ñ–∞–π–ª–æ–º)
    async def teach_file_act(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            if data['fl']==1:
                choice_type = data["choice_type"]
                choice_stud = data['choice_stud']
                file_list = self.db_prov.get_files_teach(data['stud_list'][choice_stud]['_id'], data['list_coll'][data['choice_coll']]['_id'])
                await state.update_data(file_list=file_list)
                try:
                    for name in file_list[choice_type]:
                        keyboard.add(name)
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                    await message.answer(f'*/{data["choice_stud"]}/{choice_type}:', reply_markup=keyboard)
                    await self.TeachStates.teach_choice_file.set()
                except Exception:
                    for name in file_list.keys():
                        keyboard.add(name)
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                    await message.answer(f'*/{data["choice_group"]}/{choice_stud}:', reply_markup=keyboard)
                    await self.TeachStates.teach_choice_type_f.set()
            if data['fl']==2:
                choice_type = data['choice_type']
                for name in data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][
                    choice_type].keys():
                    keyboard.add(name)
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(f'*/{data["choice_stud"]}/{choice_type}:', reply_markup=keyboard)
                await self.TeachStates.teach_uncheck_choice_file.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text == 'üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É':
                if data['fl'] == 1:
                    path = self.config.HOME_PATH + f'\\unchecked_files\\{data["file_list"][data["choice_type"]][data["choice_file"]]["_id"]}.pdf'
                else:
                    path = self.config.HOME_PATH + f'\\unchecked_files\\{data["file_list"][data["choice_coll"]][data["choice_group"]][data["choice_stud"]][data["choice_type"]][data["choice_file"]]["_id"]}.pdf'
                path_ = self.config.HOME_PATH + f'\\unchecked_files\\{data["choice_file"]}'
                if os.path.isfile(path):
                    os.rename(path, path_)
                    await message.answer_document(open(path_, 'rb'))
                    os.rename(path_, path)
                else:
                    await message.answer('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        elif message.text == 'üõ† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É':
            keyboard.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=keyboard)
            await self.TeachStates.teach_send_f_back.set()
        elif message.text == 'üìù –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É':
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', reply_markup=keyboard)
            await self.TeachStates.teach_file_comp.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]/[—Ç–∏–ø]/[—Ñ–∞–π–ª] (–ø—Ä–∏–Ω—è—Ç—å)
    async def teach_file_comp(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_file = data['choice_file']
            for name in ['üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É', 'üìù –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É', 'üõ† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É']:
                keyboard.add(name)
            keyboard.add("‚¨Ö –ù–∞–∑–∞–¥",'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            if data['fl'] == 1:
                txt = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ:\n\nüßë‚Äçüíª –í–ª–∞–¥–µ–ª–µ—Ü: <b><i>{data["choice_stud"]}</i></b>\nüì• –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: <b><i>{data["file_list"][data["choice_type"]][choice_file]["date_upload"]}</i></b>\nüìö –í–∏–¥ —Ä–∞–±–æ—Ç—ã: <b><i>{data["choice_type"]}</i></b>\nüìÅ –§–∞–π–ª: <b><i>{choice_file}</i></b>'
                if data["file_list"][data["choice_type"]][choice_file]["comment"] != "":
                    txt += f'\n\nüìå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:\n<b><i>{data["file_list"][data["choice_type"]][choice_file]["comment"]}</i></b>'
                await message.answer(txt, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            else:
                txt = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ:\n\nüßë‚Äçüíª –í–ª–∞–¥–µ–ª–µ—Ü: <b><i>{data["choice_stud"]}</i></b>\nüì• –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: <b><i>{data["file_list"][data["choice_coll"]][data["choice_group"]][data["choice_stud"]][data["choice_type"]][choice_file]["date_upload"]}</i></b>\nüìö –í–∏–¥ —Ä–∞–±–æ—Ç—ã: <b><i>{data["choice_type"]}</i></b>\nüìÅ –§–∞–π–ª: <b><i>{choice_file}</i></b>'
                if data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']][
                    choice_file]["comment"] != "":
                    txt += f"\n\nüìå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:\n<b><i>{data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']][choice_file]['comment']}</i></b>"
                await message.answer(txt, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            await self.TeachStates.teach_file_act.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.document:
            a = await message.answer('–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...')
            doc_ = await message.document.get_file()
            date_t = datetime.today()
            date_ = date_t.strftime("%d%m%Y")
            if data['fl'] == 1:
                file_info = data['file_list'][data['choice_type']][data['choice_file']]
            else:
                file_info = data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']][data['choice_file']]
            key_teacher = self.db_prov.get_key(data['obj_id'])
            if key_teacher:
                key_student = self.db_prov.get_key(file_info['st_id'])
                file_path = self.config.HOME_PATH + f'\\unchecked_files\\{file_info["_id"]}.pdf'
                file_path_new = self.config.HOME_PATH + f'\\unchecked_files\\{file_info["_id"]}new.pdf'
                await doc_.download(destination_file=file_path_new)
                if await self.cert_helper.check_valid_cert(file_path_new):
                    list_keys = self.cert_helper.get_pub_key_pdf(file_path_new)
                    if (key_teacher in list_keys) and (key_student in list_keys):
                        os.replace(file_path_new,file_path)
                        file_name = file_info['file_name']
                        new_name = file_name[:file_name.rfind('_')+1]+date_+'.pdf'
                        tc = self.db_prov.db.teachers.find_one({'_id':data['obj_id']})
                        new_path = tc['home_path']+self.db_prov.get_file_path(file_info['_id'])
                        if not os.path.isdir(self.config.HOME_PATH + new_path):
                            os.makedirs(self.config.HOME_PATH + new_path)
                        ink = 1
                        while os.path.isfile(self.config.HOME_PATH + new_path + f'\\{new_name}'):
                            new_name = new_name[:-4]+f'({ink}).pdf'
                            ink+=1
                        os.replace(file_path, self.config.HOME_PATH + new_path + f'\\{new_name}')
                        _id = self.db_prov.db.files.find_one_and_update({'_id':file_info["_id"]},{'$set':{"file_name":new_name, "date_upload":date_t, "status":"accepted", "path":new_path}})
                        if data['fl'] == 1:
                            self.db_prov.db.teachers.update_one({'_id': data['obj_id']}, {
                                '$pull': {'uncheck_file': data["file_list"][data["choice_type"]][data["choice_file"]]["_id"]}})
                        else:
                            self.db_prov.db.teachers.update_one({'_id': data['obj_id']}, {
                                '$pull': {'uncheck_file': data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data["choice_type"]][data["choice_file"]]["_id"]}})
                        self.db_prov.db.unsent_files.insert_one({'_id':_id['_id'], 'operation': 'ADD'})
                        self.cloud_mail.start_upload()
                        await message.answer("‚úÖ –§–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â–µ–Ω –≤ –∞—Ä—Ö–∏–≤.")
                    else:
                        if os.path.isfile(file_path_new):
                            os.remove(file_path_new)
                        await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å!')
                else:
                    if os.path.isfile(file_path_new):
                        os.remove(file_path_new)
                    await message.answer('üö´ –ü–æ–¥–ø–∏—Å—å –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!')
            else:
                await message.answer('‚Äº –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á!')
            await self.bot.delete_message(a.chat.id, a.message_id)
            if data['fl'] == 1:
                file_list = self.db_prov.get_files_teach(data['stud_list'][data['choice_stud']]['_id'],data['list_coll'][data['choice_coll']]['_id'])
            else:
                file_list = self.db_prov.get_uncheck_files_teach(data['obj_id'])
            await state.update_data(file_list=file_list)
            choice_type = data['choice_type']
            if data['fl'] == 1:
                if file_list.keys():
                    for name in file_list[choice_type]:
                        keyboard.add(name)
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(f'*/{data["choice_stud"]}/{choice_type}:', reply_markup=keyboard)
                await self.TeachStates.teach_choice_file.set()
            else:
                try:
                    for name in file_list[data['choice_coll']][data['choice_group']][data['choice_stud']][
                        choice_type].keys():
                        keyboard.add(name)
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
                    await message.answer(f'*/{data["choice_stud"]}/{choice_type}:', reply_markup=keyboard)
                    await self.TeachStates.teach_uncheck_choice_file.set()
                except Exception:
                    for name in sorted(file_list.keys(), reverse=True):
                        keyboard.add(name)
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
                    await message.answer('–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=keyboard)
                    await self.TeachStates.teach_uncheck_choice_coll.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]/[—Ç–∏–ø]/[—Ñ–∞–π–ª] (üõ† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É)
    async def teach_send_f_back(self,message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_file = data['choice_file']
            for name in ['üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É', 'üìù –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É', 'üõ† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É']:
                keyboard.add(name)
            keyboard.add("‚¨Ö –ù–∞–∑–∞–¥",'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            if data['fl']==1:
                txt = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ:\n\nüßë‚Äçüíª –í–ª–∞–¥–µ–ª–µ—Ü: <b><i>{data["choice_stud"]}</i></b>\nüì• –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: <b><i>{data["file_list"][data["choice_type"]][choice_file]["date_upload"]}</i></b>\nüìö –í–∏–¥ —Ä–∞–±–æ—Ç—ã: <b><i>{data["choice_type"]}</i></b>\nüìÅ –§–∞–π–ª: <b><i>{choice_file}</i></b>'
                if data["file_list"][data["choice_type"]][choice_file]["comment"] != "":
                    txt += f'\n\nüìå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:\n<b><i>{data["file_list"][data["choice_type"]][choice_file]["comment"]}</i></b>'
                await message.answer(txt, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            else:
                txt = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ:\n\nüßë‚Äçüíª –í–ª–∞–¥–µ–ª–µ—Ü: <b><i>{data["choice_stud"]}</i></b>\nüì• –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: <b><i>{data["file_list"][data["choice_coll"]][data["choice_group"]][data["choice_stud"]][data["choice_type"]][choice_file]["date_upload"]}</i></b>\nüìö –í–∏–¥ —Ä–∞–±–æ—Ç—ã: <b><i>{data["choice_type"]}</i></b>\nüìÅ –§–∞–π–ª: <b><i>{choice_file}</i></b>'
                if data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']][
                    choice_file]["comment"] != "":
                    txt += f"\n\nüìå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:\n<b><i>{data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']][choice_file]['comment']}</i></b>"
                await message.answer(txt, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            await self.TeachStates.teach_file_act.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text:
            if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                comment = '(–ù–µ—Ç)'
            else:
                comment = message.text
            if data['fl']==1:
                tg_id_stud = self.db_prov.db.students.find_one({'_id':data['file_list'][data["choice_type"]][data['choice_file']]['st_id']})
                self.db_prov.db.files.update_one({'_id': data["file_list"][data["choice_type"]][data["choice_file"]]["_id"]},{"$set":{'status' : "modification","comment":comment}})
                self.db_prov.db.teachers.update_one({'_id': data['obj_id']}, {'$pull': {'uncheck_file': data["file_list"][data["choice_type"]][data["choice_file"]]["_id"]}})
            elif data['fl']==2:
                tg_id_stud = self.db_prov.db.students.find_one(
                    {'_id': data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data["choice_type"]][data['choice_file']]['st_id']})
                self.db_prov.db.files.update_one({'_id': data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data["choice_type"]][data["choice_file"]]["_id"]},
                                            {"$set": {'status': "modification", "comment": comment}})
                self.db_prov.db.teachers.update_one({'_id': data['obj_id']}, {
                    '$pull': {'uncheck_file': data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data["choice_type"]][data["choice_file"]]["_id"]}})
    
            tg_id_stud = tg_id_stud['tg_id']
            await self.bot.send_message(tg_id_stud, f'‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n\n–§–∞–π–ª {data["choice_file"]} –Ω–µ –ø—Ä–∏–Ω—è—Ç!\n\nüìå –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n{comment}')
            if data['fl']==1:
                file_list = self.db_prov.get_files_teach(data['stud_list'][data['choice_stud']]['_id'], data['list_coll'][data['choice_coll']]['_id'])
                await state.update_data(file_list=file_list)
                choice_type = data['choice_type']
                for name in file_list[choice_type]:
                    keyboard.add(name)
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(f'*/{data["choice_stud"]}/{choice_type}:', reply_markup=keyboard)
                await self.TeachStates.teach_choice_file.set()
            elif data['fl']==2:
                file_list = self.db_prov.get_uncheck_files_teach(data['obj_id'])
                await state.update_data(file_list=file_list)
                choice_type = data['choice_type']
                await state.update_data(choice_type=choice_type)
                try:
                    for name in file_list[data['choice_coll']][data['choice_group']][data['choice_stud']][
                        choice_type].keys():
                        keyboard.add(name)
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                    await message.answer(f'*/{data["choice_stud"]}/{choice_type}:', reply_markup=keyboard)
                    await self.TeachStates.teach_uncheck_choice_file.set()
                except Exception:
                    for name in sorted(file_list.keys(), reverse=True):
                        keyboard.add(name)
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                    await message.answer('–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=keyboard)
                    await self.TeachStates.teach_uncheck_choice_coll.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    async def teach_uncheck_choice_coll(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in data['file_list'].keys():
            choice_coll = message.text
            await state.update_data(choice_coll=choice_coll)
            for name in data['file_list'][choice_coll].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/{message.text}:', reply_markup=keyboard)
            await self.TeachStates.teach_uncheck_choice_group.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]
    async def teach_uncheck_choice_group(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            file_list = self.db_prov.get_uncheck_files_teach(data['obj_id'])
            await state.update_data(file_list=file_list)
            for name in sorted(file_list.keys(), reverse=True):
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=keyboard)
            await self.TeachStates.teach_uncheck_choice_coll.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in  data['file_list'][data['choice_coll']].keys():
            choice_group = message.text
            await state.update_data(choice_group=choice_group)
            for name in data['file_list'][data['choice_coll']][choice_group].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/–î–æ–∫—É–º–µ–Ω—Ç—ã/{data["choice_coll"]}/{choice_group}:', reply_markup=keyboard)
            await self.TeachStates.teach_uncheck_choice_stud.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]
    async def teach_uncheck_choice_stud(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_coll = data['choice_coll']
            for name in data['file_list'][choice_coll].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/{choice_coll}:', reply_markup=keyboard)
            await self.TeachStates.teach_uncheck_choice_group.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in data['file_list'][data['choice_coll']][data['choice_group']].keys():
            choice_stud = message.text
            await state.update_data(choice_stud=choice_stud)
            for name in data['file_list'][data['choice_coll']][data['choice_group']][choice_stud].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_group"]}/{choice_stud}:', reply_markup=keyboard)
            await self.TeachStates.teach_uncheck_choice_type_f.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]/(–≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞)
    async def teach_uncheck_choice_type_f(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_group = data['choice_group']
            for name in data['file_list'][data['choice_coll']][choice_group].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/–î–æ–∫—É–º–µ–Ω—Ç—ã/{data["choice_coll"]}/{choice_group}:', reply_markup=keyboard)
            await self.TeachStates.teach_uncheck_choice_stud.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']].keys():
            choice_type = message.text
            await state.update_data(choice_type=choice_type)
            for name in data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][choice_type].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_stud"]}/{choice_type}:', reply_markup=keyboard)
            await self.TeachStates.teach_uncheck_choice_file.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã/[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞]/[–ì—Ä—É–ø–ø–∞]/[–°—Ç—É–¥–µ–Ω—Ç]/[—Ç–∏–ø] (–≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞)
    async def teach_uncheck_choice_file(self,message: types.Message,state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_stud = data["choice_stud"]
            for name in data['file_list'][data['choice_coll']][data['choice_group']][choice_stud].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_group"]}/{choice_stud}:', reply_markup=keyboard)
            await self.TeachStates.teach_uncheck_choice_type_f.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.text in data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']].keys():
            choice_file = message.text
            if data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']][choice_file]['status'] != 'accepted':
                await state.update_data(choice_file=choice_file)
                for name in ['üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É', 'üìù –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É', 'üõ† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É']:
                    keyboard.add(name)
                keyboard.add("‚¨Ö –ù–∞–∑–∞–¥",'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                txt = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ:\n\nüßë‚Äçüíª –í–ª–∞–¥–µ–ª–µ—Ü: <b><i>{data["choice_stud"]}</i></b>\nüì• –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: <b><i>{data["file_list"][data["choice_coll"]][data["choice_group"]][data["choice_stud"]][data["choice_type"]][choice_file]["date_upload"]}</i></b>\nüìö –í–∏–¥ —Ä–∞–±–æ—Ç—ã: <b><i>{data["choice_type"]}</i></b>\nüìÅ –§–∞–π–ª: <b><i>{choice_file}</i></b>'
                if data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']][choice_file]["comment"]!="":
                    txt += f"\n\nüìå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:\n<b><i>{data['file_list'][data['choice_coll']][data['choice_group']][data['choice_stud']][data['choice_type']][choice_file]['comment']}</i></b>"
                await message.answer(txt,reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                await self.TeachStates.teach_file_act.set()
            else:
                await message.answer('‚ùé –§–∞–π–ª —É–∂–µ –ø—Ä–∏–Ω—è—Ç, –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –Ω–∏–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã!')
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async def teach_pers_data(self,message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        if message.text == '‚ôª –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å':
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('‚ùï‚ùï‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .fdf –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.', reply_markup=keyboard)
            await self.TeachStates.teach_pers_data_ch_srt.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–°–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∏
    async def teach_pers_data_ch_srt(self,message: types.Message, state: FSMContext):
        data = await state.get_data()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            teach_info = self.db_prov.get_teach_info(data['obj_id'])
            await state.update_data(teach_info=teach_info)
            for name in ['‚ôª –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å', '‚¨Ö –ù–∞–∑–∞–¥']:
                keyboard.add(name)
            key = self.db_prov.get_key(data['obj_id'])
            if not key:
                key = 'ü§∑‚Äç‚ôÇ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: {teach_info["l_name"]} \n–ò–º—è: {teach_info["f_name"]} \n–û—Ç—á–µ—Å—Ç–≤–æ: {teach_info["m_name"]} \nTelegram-id: {teach_info["tg_id"]} \n–ö–ª—é—á –ø–æ–¥–ø–∏—Å–∏: \n\n{key} ',
                reply_markup=keyboard)
            await self.TeachStates.teach_pers_data.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã','‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.TeachStates.teach_menu.set()
        elif message.document:
            doc_ = await message.document.get_file()
            await doc_.download()
            pdf_cert = self.cert_helper.get_pub_key_fdf(doc_['file_path'])
            if pdf_cert:
                pdf_cert = pdf_cert.replace(' ', '')
                key = self.db_prov.get_key(data['obj_id'])
                if (pdf_cert != key) or (not key):
                    self.db_prov.change_teach_key(data['obj_id'], pdf_cert)
                    await message.answer('‚úÖ –ö–ª—é—á –∏–∑–º–µ–Ω–µ–Ω!')
                else:
                    await message.answer('‚ùï‚ùî –ö–ª—é—á —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º!')
            else:
                await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!')
            if os.path.isfile(doc_['file_path']):
                os.remove(doc_['file_path'])
        elif message.text:
            sert = message.text
            sert = sert.replace(' ', '')
            pos = sert.find('06092A864886F70D010101')
            if pos != -1:
                user_key = self.db_prov.get_key(data['obj_id'])
                if (sert != user_key) or (not user_key):
                    if self.db_prov.add_pub_key(sert, data['obj_id'], 'teacher'):
                        await message.answer('‚úÖ –ö–ª—é—á –∏–∑–º–µ–Ω–µ–Ω!')
                    else:
                        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞!')
                else:
                    await message.answer('‚ùï‚ùî –ö–ª—é—á —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º!')
            else:
                await message.answer('‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞!')
    
    
    
    def register_handlers_teacher(self, dp: Dispatcher):
        dp.register_message_handler(self.teach_menu, state=self.TeachStates.teach_menu)
        dp.register_message_handler(self.teach_choice_coll, state=self.TeachStates.teach_choice_coll)
        dp.register_message_handler(self.teach_choice_group, state=self.TeachStates.teach_choice_group)
        dp.register_message_handler(self.teach_choice_stud, state=self.TeachStates.teach_choice_stud)
        dp.register_message_handler(self.teach_choice_type_f, state=self.TeachStates.teach_choice_type_f)
        dp.register_message_handler(self.teach_choice_file,state=self.TeachStates.teach_choice_file)
        dp.register_message_handler(self.teach_uncheck_choice_coll, state=self.TeachStates.teach_uncheck_choice_coll)
        dp.register_message_handler(self.teach_uncheck_choice_group, state=self.TeachStates.teach_uncheck_choice_group)
        dp.register_message_handler(self.teach_uncheck_choice_stud, state=self.TeachStates.teach_uncheck_choice_stud)
        dp.register_message_handler(self.teach_uncheck_choice_type_f, state=self.TeachStates.teach_uncheck_choice_type_f)
        dp.register_message_handler(self.teach_uncheck_choice_file, state=self.TeachStates.teach_uncheck_choice_file)
        dp.register_message_handler(self.teach_file_act, state=self.TeachStates.teach_file_act)
        dp.register_message_handler(self.teach_file_comp, content_types=[types.ContentType.ANY], state=self.TeachStates.teach_file_comp)
        dp.register_message_handler(self.teach_send_f_back, state=self.TeachStates.teach_send_f_back)
        dp.register_message_handler(self.teach_pers_data, state=self.TeachStates.teach_pers_data)
        dp.register_message_handler(self.teach_pers_data_ch_srt,content_types=[types.ContentType.ANY], state=self.TeachStates.teach_pers_data_ch_srt)
