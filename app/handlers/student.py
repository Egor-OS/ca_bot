import os
import random
import re
import string
from datetime import datetime
from transliterate import translit
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from .. import cert_helper as crt_h


class StudentPanel():
    cert_helper = crt_h.Cert_Helper()

    def __init__(self, db, bot , AdmS,conf):
        self.AdminStates = AdmS
        self.db_prov = db
        self.bot = bot
        self.config = conf


    class StudStates(StatesGroup):
        stud_menu = State()
        stud_doc = State()
        stud_choice_type = State()
        stud_ch_upl_type_file = State()
        stud_upload_file = State()
        stud_pers_data = State()
        stud_pers_data_ch_srt =State()
        stud_file_list = State()
        stud_file_update = State()
    
    
    # C–¢–£–î–ï–ù–¢
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async def stud_menu(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == 'üìù –î–æ–∫—É–º–µ–Ω—Ç—ã':
            stud_info = self.db_prov.get_stud_info(data['obj_id'])
            await state.update_data(stud_info=stud_info)
            coll_list = self.db_prov.get_coll_stud(data['obj_id'])
            await state.update_data(coll_list=coll_list)
            for name in coll_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã:',reply_markup=keyboard)
            await self.StudStates.stud_doc.set()
        elif message.text == 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ':
            stud_info = self.db_prov.get_stud_info(data['obj_id'])
            await state.update_data(stud_info=stud_info)
            for name in ['‚ôª –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å','‚¨Ö –ù–∞–∑–∞–¥']:
                keyboard.add(name)
            key = self.db_prov.get_key(data['obj_id'])
            if not key:
                key = 'ü§∑‚Äç‚ôÇ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: {stud_info["l_name"]} \n–ò–º—è: {stud_info["f_name"]} \n–û—Ç—á–µ—Å—Ç–≤–æ: {stud_info["m_name"]} \nTelegram-id: {stud_info["tg_id"]} \n–ö–ª—é—á –ø–æ–¥–ø–∏—Å–∏: \n\n{key} ',
                reply_markup=keyboard)
            await self.StudStates.stud_pers_data.set()
        elif message.text == 'admin':
            stud_info = self.db_prov.get_stud_info(data['obj_id'])
            await state.update_data(stud_info=stud_info)
            if stud_info['tg_id'] in self.config.ADMINS:
                for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                    keyboard.add(name)
                await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
                await self.AdminStates.admin_menu.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã
    async def stud_doc(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.StudStates.stud_menu.set()
        if message.text in data['coll_list'].keys():
            choice_coll = message.text
            await state.update_data(choice_coll=choice_coll)
            files = self.db_prov.get_files(data['obj_id'],data['coll_list'][choice_coll]['_id'])
            await state.update_data(files=files)
            for name in files:
                keyboard.add(name)
            keyboard.add('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–ì–ª.–º–µ–Ω—é/–¥–æ–∫—É–º–µ–Ω—Ç—ã/{choice_coll}:', reply_markup=keyboard)
            await self.StudStates.stud_choice_type.set()
    
    async def stud_choice_type(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text=='‚¨Ö –ù–∞–∑–∞–¥':
            coll_list = self.db_prov.get_coll_stud(data['obj_id'])
            await state.update_data(coll_list=coll_list)
            for name in coll_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=keyboard)
            await self.StudStates.stud_doc.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.StudStates.stud_menu.set()
        elif message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª':
            types_f = self.db_prov.get_types()
            await state.update_data(types_f=types_f)
            for name in types_f:
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã: ', reply_markup=keyboard)
            await self.StudStates.stud_ch_upl_type_file.set()
        elif message.text in data['files'].keys():
            choice_type = message.text
            await state.update_data(choice_type=choice_type)
            for name in data['files'][choice_type].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_coll"]}/{choice_type}:', reply_markup=keyboard)
            await self.StudStates.stud_file_list.set()
    
    async def stud_file_list(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text=='‚¨Ö –ù–∞–∑–∞–¥':
            choice_coll = data['choice_coll']
            await state.update_data(choice_coll=choice_coll)
            files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
            await state.update_data(files=files)
            for name in files:
                keyboard.add(name)
            keyboard.add('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–ì–ª.–º–µ–Ω—é/–¥–æ–∫—É–º–µ–Ω—Ç—ã/{choice_coll}:', reply_markup=keyboard)
            await self.StudStates.stud_choice_type.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.StudStates.stud_menu.set()
        elif message.text in data['files'][data['choice_type']].keys():
            choice_file = message.text
            await state.update_data(choice_file=choice_file)
            if data['files'][data['choice_type']][choice_file]['status']=='accepted':
                await message.answer('‚ö†Ô∏è–î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç. –î–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –Ω–∏–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã!')
            else:
                captcha = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))
                await state.update_data(captcha=captcha)
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(f'‚ùï –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤–≤–µ–¥–∏—Ç–µ: {captcha}')
                await message.answer(f'‚ùï –ß—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–æ–æ–±—â–µ–Ω–∏–µ–º.', reply_markup=keyboard)
                if data['files'][data['choice_type']][choice_file]=='modification':
                    await message.answer(f"–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n"+data['files'][data['choice_type']][choice_file]['comment'])
                await self.StudStates.stud_file_update.set()
    
    async def stud_file_update(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
            await state.update_data(files=files)
            choice_type = data['choice_type']
            for name in files[choice_type].keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_coll"]}/{choice_type}:', reply_markup=keyboard)
            await self.StudStates.stud_file_list.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.StudStates.stud_menu.set()
        elif message.document:
            doc_ = await message.document.get_file()
            date_t = datetime.today()
            date_ = date_t.strftime("%d%m%Y")
            try:
                f_id = data['files'][data['choice_type']][data['choice_file']]['_id']
                file_path = self.config.HOME_PATH + f'\\unchecked_files\\{f_id}.pdf'
                file_path_new = self.config.HOME_PATH + f'\\unchecked_files\\{f_id}new.pdf'
                await doc_.download(destination_file=file_path_new)
                if await self.cert_helper.check_valid_cert(file_path_new):
                    key = self.db_prov.get_key(data['obj_id'])
                    if key in self.cert_helper.get_pub_key_pdf(file_path_new):
                        if self.db_prov.update_file(f_id, date_, date_t):
                            os.replace(file_path_new,file_path)
                            await message.answer('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
                        else:
                            if os.path.isfile(file_path_new):
                                os.remove(file_path_new)
                            await message.answer('üö´ –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                            choice_coll = data['choice_coll']
                            await state.update_data(choice_coll=choice_coll)
                            files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
                            await state.update_data(files=files)
                            for name in files:
                                keyboard.add(name)
                            keyboard.add('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
                            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                            await message.answer(f'–ì–ª.–º–µ–Ω—é/–¥–æ–∫—É–º–µ–Ω—Ç—ã/{choice_coll}:', reply_markup=keyboard)
                            await self.StudStates.stud_choice_type.set()
                            files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
                            await state.update_data(files=files)
                    else:
                        await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å!')
                        if os.path.isfile(file_path_new):
                            os.remove(file_path_new)
                else:
                    if os.path.isfile(file_path_new):
                        os.remove(file_path_new)
                    await message.answer('üö´ –ü–æ–¥–ø–∏—Å—å –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!')
            except Exception:
                await message.answer('üö´ –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                choice_coll = data['choice_coll']
                await state.update_data(choice_coll=choice_coll)
                files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
                await state.update_data(files=files)
                for name in files:
                    keyboard.add(name)
                keyboard.add('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(f'–ì–ª.–º–µ–Ω—é/–¥–æ–∫—É–º–µ–Ω—Ç—ã/{choice_coll}:', reply_markup=keyboard)
                await self.StudStates.stud_choice_type.set()
        elif message.text == data['captcha']:
            if self.db_prov.del_file_by_id(data['files'][data['choice_type']][data['choice_file']]['_id']):
                await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
            else:
                await message.answer('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏!')
            files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
            await state.update_data(files=files)
            choice_type = data['choice_type']
            try:
                for name in files[choice_type].keys():
                    keyboard.add(name)
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(f'*/{data["choice_coll"]}/{choice_type}:', reply_markup=keyboard)
                await self.StudStates.stud_file_list.set()
            except Exception:
                choice_coll = data['choice_coll']
                await state.update_data(choice_coll=choice_coll)
                files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
                await state.update_data(files=files)
                for name in files:
                    keyboard.add(name)
                keyboard.add('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(f'–ì–ª.–º–µ–Ω—é/–¥–æ–∫—É–º–µ–Ω—Ç—ã/{choice_coll}:', reply_markup=keyboard)
                await self.StudStates.stud_choice_type.set()
    
    async def stud_ch_upl_type_file(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_coll = data['choice_coll']
            await state.update_data(choice_coll=choice_coll)
            files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
            await state.update_data(files=files)
            for name in files:
                keyboard.add(name)
            keyboard.add('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–ì–ª.–º–µ–Ω—é/–¥–æ–∫—É–º–µ–Ω—Ç—ã/{choice_coll}:', reply_markup=keyboard)
            await self.StudStates.stud_choice_type.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.StudStates.stud_menu.set()
        elif message.text in data['types_f'].keys():
            choice_type = message.text
            await state.update_data(choice_type=choice_type)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            date_ = datetime.today()
            date_ = date_.strftime("%d%m%Y")
            fio = data['stud_info']['l_name']+data['stud_info']['f_name'][:1]+data['stud_info']['m_name'][:1]
            fio = translit(fio, 'ru', reversed=True)
            file_name = f"{data['types_f'][choice_type]['prefix']}NN_{data['coll_list'][data['choice_coll']]['nickname']}_{fio}_{date_}.pdf"
            await message.answer(f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª c –∏–º–µ–Ω–µ–º: \n\n<i><b>{file_name}\n\n</b></i>–≥–¥–µ NN - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã', reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            await self.StudStates.stud_upload_file.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–î–æ–∫—É–º–µ–Ω—Ç—ã/[–§–∞–π–ª]
    async def stud_upload_file(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text=='‚¨Ö –ù–∞–∑–∞–¥':
            types_f = self.db_prov.get_types()
            await state.update_data(types_f=types_f)
            for name in types_f:
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã: ', reply_markup=keyboard)
            await self.StudStates.stud_ch_upl_type_file.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.StudStates.stud_menu.set()
        elif message.document:
            doc_ = await message.document.get_file()
            a = await message.answer('–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...')
            date_t = datetime.today()
            date_ = date_t.strftime("%d%m%Y")
            fio = data['stud_info']['l_name'] + data['stud_info']['f_name'][:1] + data['stud_info']['m_name'][:1]
            fio = translit(fio, 'ru', reversed=True)
            regexp = fr"\b{data['types_f'][data['choice_type']]['prefix']}\d*_{data['coll_list'][data['choice_coll']]['nickname']}_{fio}_{date_}.pdf\b"
            if re.fullmatch(regexp, message.document.file_name):
                if data['choice_type'] in data['files'].keys():
                    list_files = data['files'][data['choice_type']]
                else:
                    list_files = {}
                if self.db_prov.check_free_file_name(message.document.file_name, list_files):
                    id_ = self.db_prov.add_file(data['coll_list'][data['choice_coll']]['_id'],
                                     data['obj_id'],
                                     data['coll_list'][data['choice_coll']]['owner_id']['_id'],
                                     date_t,
                                     data['types_f'][data['choice_type']]['_id'],
                                     message.document.file_name)
                    if id_:
                        file_path = self.config.HOME_PATH + f'\\unchecked_files\\{id_}.pdf'
                        await doc_.download(destination_file=file_path)
                        key = self.db_prov.get_key(data['obj_id'])
                        if key:
                            if await self.cert_helper.check_valid_cert(file_path):
                                if key in self.cert_helper.get_pub_key_pdf(file_path):
                                    await message.answer('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!')
                                    files = self.db_prov.get_files(data['obj_id'],data['coll_list'][data['choice_coll']]['_id'])
                                    await state.update_data(files=files)
                                else:
                                    self.db_prov.del_file_by_id(id_)
                                    await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å!')
                            else:
                                self.db_prov.del_file_by_id(id_)
                                await message.answer('üö´ –ü–æ–¥–ø–∏—Å—å –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!')
                        else:
                            await message.answer('‚Äº –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á!')
                            self.db_prov.del_file_by_id(id_)
                    else:
                        await message.answer('üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞!')
                else:
                    await message.answer('‚Äº –ò–º—è —Ñ–∞–π–ª–∞ –∑–∞–Ω—è—Ç–æ!')
            else:
                await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞!')
            await self.bot.delete_message(a.chat.id, a.message_id)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async def stud_pers_data(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.StudStates.stud_menu.set()
        elif message.text == '‚ôª –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å':
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('‚ùï‚ùï‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .fdf –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.', reply_markup=keyboard)
            await self.StudStates.stud_pers_data_ch_srt.set()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–°–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∏
    async def stud_pers_data_ch_srt(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            stud_info = self.db_prov.get_stud_info(data['obj_id'])
            await state.update_data(stud_info=stud_info)
            for name in ['‚ôª –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å', '‚¨Ö –ù–∞–∑–∞–¥']:
                keyboard.add(name)
            key = self.db_prov.get_key(data['obj_id'])
            if not key:
                key = 'ü§∑‚Äç‚ôÇ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: {stud_info["l_name"]} \n–ò–º—è: {stud_info["f_name"]} \n–û—Ç—á–µ—Å—Ç–≤–æ: {stud_info["m_name"]} \nTelegram-id: {stud_info["tg_id"]} \n–ö–ª—é—á –ø–æ–¥–ø–∏—Å–∏: \n\n{key} ',
                reply_markup=keyboard)
            await self.StudStates.stud_pers_data.set()
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
            await self.StudStates.stud_menu.set()
        elif message.document:
            doc_ = await message.document.get_file()
            await doc_.download()
            pdf_cert = self.cert_helper.get_pub_key_fdf(doc_['file_path'])
            if pdf_cert:
                pdf_cert = pdf_cert.replace(' ', '')
                key = self.db_prov.get_key(data['obj_id'])
                if (pdf_cert != key) or (not key):
                    self.db_prov.change_stud_key(data['obj_id'], pdf_cert)
                    await message.answer('‚úÖ –ö–ª—é—á –∏–∑–º–µ–Ω–µ–Ω!')
                else:
                    await message.answer('‚ùï‚ùî –ö–ª—é—á —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º!')
            else:
                await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!')
            if os.path.isfile(doc_['file_path']):
                os.remove(doc_['file_path'])
        elif message.text:
            sert = message.text
            sert = sert.replace(' ','')
            pos = sert.find('06092A864886F70D010101')
            if pos != -1:
                user_key = self.db_prov.get_key(data['obj_id'])
                if (sert != user_key) or (not user_key):
                    if self.db_prov.add_pub_key(sert, data['obj_id'], 'student'):
                        await message.answer('‚úÖ –ö–ª—é—á –∏–∑–º–µ–Ω–µ–Ω!')
                    else:
                        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞!')
                else:
                    await message.answer('‚ùï‚ùî –ö–ª—é—á —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º!')
            else:
                await message.answer('‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞!')


    def register_handlers_student(self, dp: Dispatcher):
        dp.register_message_handler(self.stud_menu, state=self.StudStates.stud_menu)
        dp.register_message_handler(self.stud_doc, state=self.StudStates.stud_doc)
        dp.register_message_handler(self.stud_choice_type, state=self.StudStates.stud_choice_type)
        dp.register_message_handler(self.stud_upload_file,content_types=[types.ContentType.ANY], state=self.StudStates.stud_upload_file)
        dp.register_message_handler(self.stud_ch_upl_type_file, state=self.StudStates.stud_ch_upl_type_file)
        dp.register_message_handler(self.stud_pers_data, state=self.StudStates.stud_pers_data)
        dp.register_message_handler(self.stud_pers_data_ch_srt,content_types=[types.ContentType.ANY], state=self.StudStates.stud_pers_data_ch_srt)
        dp.register_message_handler(self.stud_file_list, state=self.StudStates.stud_file_list)
        dp.register_message_handler(self.stud_file_update,content_types=[types.ContentType.ANY], state=self.StudStates.stud_file_update)