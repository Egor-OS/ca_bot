import random
import string
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup



class AdminPanel():

    def __init__(self, db, bot, cloud_mail):
        self.db_prov = db
        self.bot = bot
        self.cloud_mail = cloud_mail

    class AdminStates(StatesGroup):
        admin_menu = State()
        admin_choice_teach = State()
        admin_choice_group = State()
        admin_add_stud = State()
        admin_add_gr_to_coll = State()
        admin_add_teacher = State()
        admin_action_teach = State()
        admin_del_teach = State()
        admin_add_coll = State()
        admin_act_coll = State()
        admin_del_coll = State()
        admin_update_stud = State()
        admin_del_stud = State()
        admin_del_group = State()
        admin_del_gr_from_coll = State()
        admin_doc_menu = State()
        admin_choice_type = State()
        admin_update_type = State()
        get_voucher = State()
    
    # –ú–µ—Ç–æ–¥–∏—Å—Ç
    # –ì–ª–≤–Ω–æ–µ –º–µ–Ω—é
    async def admin_menu(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == 'üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏':
            teachers_list = self.db_prov.get_list_teacher()
            await state.update_data(teachers_list = teachers_list)
            for name in teachers_list.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=keyboard)
            await self.AdminStates.admin_choice_teach.set()
        elif message.text == 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏':
            group_list = self.db_prov.get_group_list_adm()
            await state.update_data(group_list=group_list)
            for name in group_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏:', reply_markup=keyboard)
            await message.answer('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')
            await self.AdminStates.admin_choice_group.set()
        elif message.text == 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏':
            for name in ['üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏','üßπ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É','‚¨Ö –ù–∞–∑–∞–¥']:
                keyboard.add(name)
            await message.answer('–ì–ª.–º–µ–Ω—é/–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:', reply_markup=keyboard)
            await self.AdminStates.admin_doc_menu.set()
        elif message.text == 'üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
            await state.finish()
            await state.update_data(mess=[])
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            if self.db_prov.get_student_id(message.chat.id):
                obj_id = self.db_prov.get_student_id(message.chat.id)
                if obj_id:
                    await state.update_data(obj_id=obj_id)
                    for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                        keyboard.add(name)
                    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
                    await self.StudStates.stud_menu.set()
                else:
                    await message.answer('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!')
            elif self.db_prov.get_teacher_id(message.chat.id):
                obj_id = self.db_prov.get_teacher_id(message.chat.id)
                if obj_id:
                    await state.update_data(obj_id=obj_id)
                    for name in ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', '‚è≥ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üîè –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                        keyboard.add(name)
                    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard)
                    await self.TeachStates.teach_menu.set()
                else:
                    await message.answer('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!')
            else:
                await message.answer('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è!')
                await self.AdminStates.admin_menu.set()
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∞–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    async def admin_choice_teach(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == 'üÜï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è':
            keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('–ü–æ–ª—É—á–∏—Ç–µ –≤–∞—É—á–µ—Ä –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–ò–õ–ò.....')
            await message.answer('–î–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]', reply_markup=keyboard)
            await self.AdminStates.admin_add_teacher.set()
        elif message.text in data['teachers_list'].keys():
            choice_teach = message.text
            path_list = self.db_prov.get_path_list(data['teachers_list'][choice_teach]['_id'])
            await state.update_data(path_list=path_list)
            for name in path_list.keys():
                keyboard.add(name)
            await state.update_data(choice_teach = message.text)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            teach_info = self.db_prov.get_teach_info(data['teachers_list'][choice_teach]['_id'])
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: <b>{teach_info["l_name"]}</b> \n–ò–º—è: <b>{teach_info["f_name"]}</b> \n–û—Ç—á–µ—Å—Ç–≤–æ: <b>{teach_info["m_name"]}</b> \nTelegram-id: <b>{teach_info["tg_id"]}</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await message.answer(
                '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]',
                reply_markup=keyboard)
            await self.AdminStates.admin_action_teach.set()
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
    async def admin_choice_group(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text in data['group_list'].keys():
            choice_group = message.text
            await state.update_data(choice_group=choice_group)
            list_stud_id = data['group_list'][choice_group]['list_students_id']
            list_stud = self.db_prov.get_stud_list_adm(list_stud_id)
            await state.update_data(list_stud=list_stud)
            for name in list_stud.keys():
                keyboard.add(name)
            keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(
                '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await self.AdminStates.admin_add_stud.set()
        elif message.text:
            self.db_prov.add_group(message.text)
            await message.answer(f'‚úÖ –ì—Ä—É–ø–ø–∞ {message.text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
            group_list = self.db_prov.get_group_list_adm()
            await state.update_data(group_list=group_list)
            for name in group_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('–ì–ª.–º–µ–Ω—é/üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏:', reply_markup=keyboard)
            await message.answer('‚ùï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')
            await self.AdminStates.admin_choice_group.set()
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏/[–≥—Ä—É–ø–ø–∞]
    async def admin_add_stud(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
            group_list = self.db_prov.get_group_list_adm()
            await state.update_data(group_list=group_list)
            for name in group_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏:', reply_markup=keyboard)
            await self.AdminStates.admin_choice_group.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text=='üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä':
            await state.update_data(type_voucher='student')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—É—á–µ—Ä–æ–≤:', reply_markup=keyboard)
            await self.AdminStates.get_voucher.set()
        elif message.text=='üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É':
            captcha = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))
            await state.update_data(captcha=captcha)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: {captcha}', reply_markup=keyboard)
            await self.AdminStates.admin_del_group.set()
        elif message.text in data['list_stud'].keys():
            choice_stud = message.text
            await state.update_data(choice_stud=choice_stud)
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            stud_info = data['list_stud'][choice_stud]
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: <b>{stud_info["l_name"]}</b> \n–ò–º—è: <b>{stud_info["f_name"]}</b> \n–û—Ç—á–µ—Å—Ç–≤–æ: <b>{stud_info["m_name"]}</b> \nTelegram-id: <b>{stud_info["tg_id"]}</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await message.answer(
                '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await self.AdminStates.admin_update_stud.set()
        elif message.text:
            stud_info = message.text
            stud_info = stud_info.replace("[",'').replace(']','').replace(' ', '').split(',')
            if len(stud_info) == 4:
                if self.db_prov.add_student(stud_info[0], stud_info[1], stud_info[2], stud_info[3],data['group_list'][data['choice_group']]['_id']):
                    await message.answer('‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
                    group_list = self.db_prov.get_group_list_adm()
                    await state.update_data(group_list=group_list)
                    list_stud_id = group_list[data['choice_group']]['list_students_id']
                    list_stud = self.db_prov.get_stud_list_adm(list_stud_id)
                    await state.update_data(list_stud=list_stud)
                    for name in list_stud.keys():
                        keyboard.add(name)
                    keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                    await message.answer(
                        '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                        parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
                    await self.AdminStates.admin_add_stud.set()
                else:
                    await message.answer('üö´ –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!')
            else:
                await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!')
    
    async def admin_del_group(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            list_stud_id = data['group_list'][data['choice_group']]['list_students_id']
            list_stud = self.db_prov.get_stud_list_adm(list_stud_id)
            await state.update_data(list_stud=list_stud)
            for name in list_stud.keys():
                keyboard.add(name)
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
            keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(
                '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await self.AdminStates.admin_add_stud.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text==data['captcha']:
            if self.db_prov.del_group(data['group_list'][data['choice_group']]['_id']):
                await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
            else:
                await message.answer('üö´ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!')
            group_list = self.db_prov.get_group_list_adm()
            await state.update_data(group_list=group_list)
            for name in group_list.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏:', reply_markup=keyboard)
            await message.answer('‚ùï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')
            await self.AdminStates.admin_choice_group.set()
    
    async def admin_update_stud(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            list_stud_id = data['group_list'][data['choice_group']]['list_students_id']
            list_stud = self.db_prov.get_stud_list_adm(list_stud_id)
            await state.update_data(list_stud=list_stud)
            for name in list_stud.keys():
                keyboard.add(name)
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
            keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(
                '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await self.AdminStates.admin_add_stud.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text=='üóë –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞':
            captcha = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))
            await state.update_data(captcha=captcha)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: {captcha}', reply_markup=keyboard)
            await self.AdminStates.admin_del_stud.set()
        elif message.text:
            stud_info = message.text
            stud_info = stud_info.replace("[",'').replace(']','').replace(' ', '').split(',')
            if len(stud_info) == 4:
                if self.db_prov.update_stud(data['list_stud'][data['choice_stud']]['_id'],stud_info[0], stud_info[1], stud_info[2], stud_info[3]):
                    await message.answer('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                    group_list = self.db_prov.get_group_list_adm()
                    await state.update_data(group_list=group_list)
                    list_stud_id = group_list[data['choice_group']]['list_students_id']
                    list_stud = self.db_prov.get_stud_list_adm(list_stud_id)
                    await state.update_data(list_stud=list_stud)
                    for name in list_stud.keys():
                        keyboard.add(name)
                    keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
                    keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                    await message.answer(
                        '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                        parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
                    await self.AdminStates.admin_add_stud.set()
                else:
                    await message.answer('üö´ –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!')
            else:
                await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!')
    
    async def admin_del_stud(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            stud_info = data['list_stud'][data['choices_stud']]
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: <b>{stud_info["l_name"]}</b> \n–ò–º—è: <b>{stud_info["f_name"]}</b> \n–û—Ç—á–µ—Å—Ç–≤–æ: <b>{stud_info["m_name"]}</b> \nTelegram-id: <b>{stud_info["tg_id"]}</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await message.answer(
                '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await self.AdminStates.admin_update_stud.set()
        elif message.text==data['captcha']:
            self.db_prov.del_stud(data['list_stud'][data['choice_stud']]['_id'])
            await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
            group_list = self.db_prov.get_group_list_adm()
            await state.update_data(group_list=group_list)
            list_stud_id = group_list[data['choice_group']]['list_students_id']
            list_stud = self.db_prov.get_stud_list_adm(list_stud_id)
            await state.update_data(list_stud=list_stud)
            for name in list_stud.keys():
                keyboard.add(name)
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
            keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(
                '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await self.AdminStates.admin_add_stud.set()
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏/–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    async def admin_add_teacher(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            teachers_list = self.db_prov.get_list_teacher()
            await state.update_data(teachers_list=teachers_list)
            for name in teachers_list.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=keyboard)
            await self.AdminStates.admin_choice_teach.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == 'üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä':
            await state.update_data(type_voucher= 'teacher')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—É—á–µ—Ä–æ–≤:', reply_markup=keyboard)
            await self.AdminStates.get_voucher.set()
        elif message.text:
            teach_info = message.text
            teach_info = teach_info.replace("[",'').replace(']','').replace(' ', '').split(',')
            if len(teach_info)==4:
                if self.db_prov.add_teacher(teach_info[0],teach_info[1],teach_info[2],teach_info[3]):
                    await message.answer('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
                else:
                    await message.answer('üö´ –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!')
            else:
                await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!')
    
    async def get_voucher(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text=='‚¨Ö –ù–∞–∑–∞–¥':
            if data['type_voucher'] == 'teacher':
                keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(
                    '–ü–æ–ª—É—á–∏—Ç–µ –≤–∞—É—á–µ—Ä –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–ò–õ–ò.....')
                await message.answer(
                    '–î–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]',
                    reply_markup=keyboard)
                await self.AdminStates.admin_add_teacher.set()
            else:
                choice_group = data['choice_group']
                list_stud_id = data['group_list'][choice_group]['list_students_id']
                list_stud = self.db_prov.get_stud_list_adm(list_stud_id)
                await state.update_data(list_stud=list_stud)
                for name in list_stud.keys():
                    keyboard.add(name)
                keyboard.add('üí≥ –ü–æ–ª—É—á–∏—Ç—å –≤–∞—É—á–µ—Ä')
                keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(
                    '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n\n<b>[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]</b>',
                    parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
                await self.AdminStates.admin_add_stud.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text:
            try:
                count_voucher = int(message.text)
                if count_voucher <= 30:
                    txt = ''
                    for i in range(count_voucher):
                        letters_and_digits = string.ascii_letters + string.digits
                        rand_string = ''.join(random.sample(letters_and_digits, 15))
                        if data['type_voucher']=='teacher':
                            self.db_prov.add_voucher(rand_string,'','teacher')
                        else:
                            if txt=='':
                                txt += f"******* {data['choice_group']} *******\n"
                            self.db_prov.add_voucher(rand_string, data['group_list'][data['choice_group']]['_id'], 'student')
                        txt += f'{i+1}. {rand_string}\n'
                    await message.answer(txt)
            except Exception:
                pass
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∞–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏/[–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]
    async def admin_action_teach(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            teachers_list = self.db_prov.get_list_teacher()
            await state.update_data(teachers_list=teachers_list)
            for name in teachers_list.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
            await message.answer('–ì–ª.–º–µ–Ω—é/üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=keyboard)
            await self.AdminStates.admin_choice_teach.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == 'üÜï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É':
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n\n[–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ],[–°–æ–∫—Ä–∞—â–µ–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]',reply_markup=keyboard)
            await self.AdminStates.admin_add_coll.set()
        elif message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è':
            captcha = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))
            await state.update_data(captcha=captcha)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: {captcha}', reply_markup=keyboard)
            await self.AdminStates.admin_del_teach.set()
        elif message.text in data['path_list'].keys():
            choice_path = message.text
            await state.update_data(choice_path=choice_path)
            groups = self.db_prov.get_group_in_coll(data['path_list'][choice_path]['group_list_id'])
            await state.update_data(groups=groups)
            for name in groups.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_teach"]}/{choice_path}', reply_markup=keyboard)
            await self.AdminStates.admin_act_coll.set()
        elif message.text:
            teach_info = message.text
            teach_info = teach_info.replace("[",'').replace(']','').replace(' ', '').split(',')
            teach_id = data['teachers_list'][data['choice_teach']]['_id']
            if len(teach_info) == 4:
                if self.db_prov.update_teacher(teach_id, teach_info[0], teach_info[1], teach_info[2], teach_info[3]):
                    await message.answer('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
                else:
                    await message.answer('üö´ –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è!')
            else:
                await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!')
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∞–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏/[–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]/—É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    async def admin_del_teach(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_teach = data['choice_teach']
            path_list = self.db_prov.get_path_list(data['teachers_list'][choice_teach]['_id'])
            await state.update_data(path_list=path_list)
            for name in path_list.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            teach_info = self.db_prov.get_teach_info(data['teachers_list'][choice_teach]['_id'])
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: <b>{teach_info["l_name"]}</b> \n–ò–º—è: <b>{teach_info["f_name"]}</b> \n–û—Ç—á–µ—Å—Ç–≤–æ: <b>{teach_info["m_name"]}</b> \nTelegram-id: <b>{teach_info["tg_id"]}</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await message.answer(
                '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]',
                reply_markup=keyboard)
            await self.AdminStates.admin_action_teach.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == data['captcha']:
            if self.db_prov.del_teacher(data['teachers_list'][data['choice_teach']]['_id']):
                await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
                teachers_list = self.db_prov.get_list_teacher()
                await state.update_data(teachers_list=teachers_list)
                for name in teachers_list.keys():
                    keyboard.add(name)
                keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥')
                await message.answer('–ì–ª.–º–µ–Ω—é/üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=keyboard)
                await self.AdminStates.admin_choice_teach.set()
            else:
                await message.answer('üö´ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!')
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∞–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏/[–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]/–¥–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
    async def admin_add_coll(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            path_list = self.db_prov.get_path_list(data['teachers_list'][data['choice_teach']]['_id'])
            await state.update_data(path_list=path_list)
            for name in path_list.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            teach_info = self.db_prov.get_teach_info(data['teachers_list'][data['choice_teach']]['_id'])
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: <b>{teach_info["l_name"]}</b> \n–ò–º—è: <b>{teach_info["f_name"]}</b> \n–û—Ç—á–µ—Å—Ç–≤–æ: <b>{teach_info["m_name"]}</b> \nTelegram-id: <b>{teach_info["tg_id"]}</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await message.answer(
                '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]',
                reply_markup=keyboard)
            await self.AdminStates.admin_action_teach.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text:
            mess_ = message.text
            mess_ = mess_.replace('[','').replace(']','').split(',')
            if len(mess_) == 2:
                if self.db_prov.add_coll(mess_[0],mess_[1], data['teachers_list'][data['choice_teach']]['_id']):
                    await message.answer(f'‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
                else:
                    await message.answer(f'–û—à–∏–±–∫–∞! –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏–ª–∏ –µ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å–≤—É–µ—Ç!')
            else:
                await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!')
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∞–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏/[–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞/
    async def admin_act_coll(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            path_list = self.db_prov.get_path_list(data['teachers_list'][data['choice_teach']]['_id'])
            await state.update_data(path_list=path_list)
            for name in path_list.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            teach_info = self.db_prov.get_teach_info(data['teachers_list'][data['choice_teach']]['_id'])
            await message.answer(
                f'–§–∞–º–∏–ª–∏—è: <b>{teach_info["l_name"]}</b> \n–ò–º—è: <b>{teach_info["f_name"]}</b> \n–û—Ç—á–µ—Å—Ç–≤–æ: <b>{teach_info["m_name"]}</b> \nTelegram-id: <b>{teach_info["tg_id"]}</b>',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
            await message.answer(
                '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]',
                reply_markup=keyboard)
            await self.AdminStates.admin_action_teach.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == 'üÜï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É':
            list_group = self.db_prov.get_group_list_adm()
            await state.update_data(list_group=list_group)
            for name in list_group.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=keyboard)
            await self.AdminStates.admin_add_gr_to_coll.set()
        elif message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É':
            captcha = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))
            await state.update_data(captcha=captcha)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: {captcha}', reply_markup=keyboard)
            await self.AdminStates.admin_del_coll.set()
        elif message.text in data['groups']:
            choice_group = message.text
            await state.update_data(choice_group=choice_group)
            captcha = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))
            await state.update_data(captcha=captcha)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: {captcha}', reply_markup=keyboard)
            await self.AdminStates.admin_del_gr_from_coll.set()
    
    async def admin_del_gr_from_coll(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            path_list = self.db_prov.get_path_list(data['teachers_list'][data['choice_teach']]['_id'])
            await state.update_data(path_list=path_list)
            choice_path = data['choice_path']
            await state.update_data(choice_path=choice_path)
            groups = self.db_prov.get_group_in_coll(path_list[choice_path]['group_list_id'])
            await state.update_data(groups=groups)
            for name in groups.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_teach"]}/{data["choice_path"]}', reply_markup=keyboard)
            await self.AdminStates.admin_act_coll.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == data['captcha']:
            if self.db_prov.del_gr_from_coll(data['groups'][data['choice_group']]['_id'],data['path_list'][data['choice_path']]['_id']):
                path_list = self.db_prov.get_path_list(data['teachers_list'][data['choice_teach']]['_id'])
                await state.update_data(path_list=path_list)
                choice_path = data['choice_path']
                await state.update_data(choice_path=choice_path)
                groups = self.db_prov.get_group_in_coll(path_list[choice_path]['group_list_id'])
                await state.update_data(groups=groups)
                for name in groups.keys():
                    keyboard.add(name)
                keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É')
                keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(f'*/{data["choice_teach"]}/{data["choice_path"]}', reply_markup=keyboard)
                await self.AdminStates.admin_act_coll.set()
            else:
                await message.answer('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!')
    
    async def admin_add_gr_to_coll(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            path_list = self.db_prov.get_path_list(data['teachers_list'][data['choice_teach']]['_id'])
            await state.update_data(path_list=path_list)
            choice_path = data['choice_path']
            await state.update_data(choice_path=choice_path)
            groups = self.db_prov.get_group_in_coll(path_list[choice_path]['group_list_id'])
            await state.update_data(groups=groups)
            for name in groups.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_teach"]}/{data["choice_path"]}', reply_markup=keyboard)
            await self.AdminStates.admin_act_coll.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text in data['list_group'].keys():
            choice_group = message.text
            if choice_group not in data['groups']:
                self.db_prov.add_group_to_coll(data['list_group'][choice_group]['_id'], data['path_list'][data['choice_path']]['_id'])
                await message.answer('‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
                path_list = self.db_prov.get_path_list(data['teachers_list'][data['choice_teach']]['_id'])
                await state.update_data(path_list=path_list)
                groups = self.db_prov.get_group_in_coll(path_list[data['choice_path']]['group_list_id'])
                await state.update_data(groups=groups)
            else:
                await message.answer('‚ö† –ì—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏/[–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞/—É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    async def admin_del_coll(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            choice_path = data['choice_path']
            groups = self.db_prov.get_group_in_coll(data['path_list'][choice_path]['group_list_id'])
            await state.update_data(groups=groups)
            for name in groups.keys():
                keyboard.add(name)
            keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É')
            keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'*/{data["choice_teach"]}/{data["choice_path"]}', reply_markup=keyboard)
            await self.AdminStates.admin_act_coll.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == data['captcha']:
            coll_id = data['path_list'][data['choice_path']]['_id']
            teach_id = data['teachers_list'][data['choice_teach']]['_id']
            if self.db_prov.del_coll(coll_id, teach_id):
                await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
                choice_teach = data['choice_teach']
                path_list = self.db_prov.get_path_list(data['teachers_list'][choice_teach]['_id'])
                await state.update_data(path_list=path_list)
                for name in path_list.keys():
                    keyboard.add(name)
                keyboard.add('üÜï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
                keyboard.add('üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
                keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                await message.answer(
                    '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–§–∞–º–∏–ª–∏—è],[–ò–º—è],[–û—Ç—á–µ—Å—Ç–≤–æ],[Telegram-id]',
                    reply_markup=keyboard)
                await self.AdminStates.admin_action_teach.set()
            else:
                await message.answer('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!')
    
    async def admin_doc_menu(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == "üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏":
            types_doc = self.db_prov.get_types_doc()
            await state.update_data(types_doc=types_doc)
            for name in types_doc.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(
                '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–ù–∞–∑–≤–∞–Ω–∏–µ],[–ü—Ä–µ—Ñ–∏–∫—Å],[–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è(–º–µ—Å)]',
                reply_markup=keyboard)
            await self.AdminStates.admin_choice_type.set()
        elif message.text == "üßπ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É":
            a = await message.answer('–ò–¥–µ—Ç –æ—á–∏—Å—Ç–∫–∞...')
            list_clear = self.db_prov.start_clear()
            self.cloud_mail.del_file()
            await self.bot.delete_message(a.chat.id, a.message_id)
            await message.answer(f'üßΩ –£–¥–∞–ª–µ–Ω–æ {len(list_clear)} —Ñ–∞–π–ª–æ–≤!')
    
    async def admin_choice_type(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
            for name in ['üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏', 'üßπ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É', '‚¨Ö –ù–∞–∑–∞–¥']:
                keyboard.add(name)
            await message.answer('–ì–ª.–º–µ–Ω—é/–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:', reply_markup=keyboard)
            await self.AdminStates.admin_doc_menu.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text in data['types_doc'].keys():
            captcha = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))
            await state.update_data(captcha=captcha)
            choice_type = message.text
            await state.update_data(choice_type=choice_type)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(f'‚ùï –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ {captcha} ', reply_markup=keyboard)
            await message.answer(f'‚ùï –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫:')
            await self.AdminStates.admin_update_type.set()
        elif message.text:
            mess_ = message.text
            mess_ = mess_.replace('[','').replace(']','').split(',')
            if len(mess_) == 3:
                if self.db_prov.add_file_type(mess_[0], mess_[1], mess_[2]):
                    await message.answer(f'‚ôª –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
                    types_doc = self.db_prov.get_types_doc()
                    await state.update_data(types_doc=types_doc)
                    for name in types_doc.keys():
                        keyboard.add(name)
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                    await message.answer(
                        '‚ùï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n\n[–ù–∞–∑–≤–∞–Ω–∏–µ],[–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è(–º–µ—Å)]',
                        reply_markup=keyboard)
                    await self.AdminStates.admin_choice_type.set()
                else:
                    await message.answer('üö´ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!')
            else:
                await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!')
    
    async def admin_update_type(self, message: types.Message, state: FSMContext):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        data = await state.get_data()
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            types_doc = self.db_prov.get_types_doc()
            await state.update_data(types_doc=types_doc)
            for name in types_doc.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(
                '‚ùï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–ù–∞–∑–≤–∞–Ω–∏–µ],[–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è(–º–µ—Å)]',
                reply_markup=keyboard)
            await self.AdminStates.admin_choice_type.set()
        elif message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é":
            for name in ['üë©üèº‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏', 'üßëüèº‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏', 'üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏','üëãüèº –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']:
                keyboard.add(name)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ', reply_markup=keyboard)
            await self.AdminStates.admin_menu.set()
        elif message.text == data['captcha']:
            if self.db_prov.del_type(data['types_doc'][data['choice_type']]['_id']):
                await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
            else:
                await message.answer('üö´ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!')
            types_doc = self.db_prov.get_types_doc()
            await state.update_data(types_doc=types_doc)
            for name in types_doc.keys():
                keyboard.add(name)
            keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            await message.answer(
                '‚ùï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–ù–∞–∑–≤–∞–Ω–∏–µ],[–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è(–º–µ—Å)]',
                reply_markup=keyboard)
            await self.AdminStates.admin_doc_menu.set()
        elif message.text:
            try:
                exp = int(message.text)
                if self.db_prov.update_type(data['types_doc'][data['choice_type']]['_id'],exp):
                    await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
                    types_doc = self.db_prov.get_types_doc()
                    await state.update_data(types_doc=types_doc)
                    for name in types_doc.keys():
                        keyboard.add(name)
                    keyboard.add('‚¨Ö –ù–∞–∑–∞–¥','üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
                    await message.answer(
                        '‚ùï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n[–ù–∞–∑–≤–∞–Ω–∏–µ],[–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è(–º–µ—Å)]',
                        reply_markup=keyboard)
                    await self.AdminStates.admin_doc_menu.set()
                else:
                    await message.answer('üö´ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!')
            except Exception:
                pass
    
    def register_handlers_admin(self, dp: Dispatcher):
        dp.register_message_handler(self.admin_menu, state=self.AdminStates.admin_menu)
        dp.register_message_handler(self.admin_choice_teach, state=self.AdminStates.admin_choice_teach)
        dp.register_message_handler(self.admin_choice_group, state=self.AdminStates.admin_choice_group)
        dp.register_message_handler(self.admin_add_stud, state=self.AdminStates.admin_add_stud)
        dp.register_message_handler(self.admin_add_teacher, state=self.AdminStates.admin_add_teacher)
        dp.register_message_handler(self.admin_action_teach, state=self.AdminStates.admin_action_teach)
        dp.register_message_handler(self.admin_del_teach, state=self.AdminStates.admin_del_teach)
        dp.register_message_handler(self.admin_add_coll, state=self.AdminStates.admin_add_coll)
        dp.register_message_handler(self.admin_act_coll, state=self.AdminStates.admin_act_coll)
        dp.register_message_handler(self.admin_del_coll, state=self.AdminStates.admin_del_coll)
        dp.register_message_handler(self.admin_update_stud, state=self.AdminStates.admin_update_stud)
        dp.register_message_handler(self.admin_del_stud, state=self.AdminStates.admin_del_stud)
        dp.register_message_handler(self.admin_add_gr_to_coll, state=self.AdminStates.admin_add_gr_to_coll)
        dp.register_message_handler(self.admin_del_group, state=self.AdminStates.admin_del_group)
        dp.register_message_handler(self.admin_del_gr_from_coll,state=self.AdminStates.admin_del_gr_from_coll)
        dp.register_message_handler(self.admin_doc_menu, state=self.AdminStates.admin_doc_menu)
        dp.register_message_handler(self.admin_choice_type, state=self.AdminStates.admin_choice_type)
        dp.register_message_handler(self.admin_update_type, state=self.AdminStates.admin_update_type)
        dp.register_message_handler(self.get_voucher, state=self.AdminStates.get_voucher)